# -*- coding: utf-8 -*-
"""Copy of Tugas Submission 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11lX5h2E2PSfPUlxeExFeSRfLkA41lnY7
"""

pip install -q kaggle

from google.colab import files

files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d andrewmvd/animal-faces

# unzip
!unzip animal-faces.zip

import os

base_dir='/content/afhq'
train_dir=os.path.join(base_dir,'train')
val_dir=os.path.join(base_dir,'val')

os.listdir(train_dir)

os.listdir(val_dir)

train_wild_dir = os.path.join(train_dir,"wild")
train_cat_dir = os.path.join(train_dir,"cat")
train_dog_dir = os.path.join(train_dir,"dog")

validat_paper_dir = os.path.join(val_dir,"wild")
validat_scissors_dir = os.path.join(val_dir,"Cat")
validat_rock_dir = os.path.join(val_dir,"dog")

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop

from keras.preprocessing.image import ImageDataGenerator
datagen=ImageDataGenerator(
    validation_split=0.2,
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
train_gene=datagen.flow_from_directory(
    train_dir,
    subset='training',
    target_size=(224,224),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical',
    shuffle=True,
    seed=42,)
val_gene=datagen.flow_from_directory(
    val_dir,
    subset='validation',
    target_size=(224,224),
    batch_size=32,
    color_mode='rgb',
    class_mode='categorical',
    shuffle=True,
    seed=42,
    )

model=tf.keras.models.Sequential([
      tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(224,224,3)),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Flatten(),
      tf.keras.layers.Dropout(0.5),

      tf.keras.layers.Dense(512,activation='relu'),
      tf.keras.layers.Dense(3,activation='softmax')
  
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(lr=3e-4),
              metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping

cb=[EarlyStopping(monitor='loss',mode='min',patience=5,restore_best_weights=True)]

history=model.fit(
    train_gene,
    steps_per_epoch=25,
    epochs=40,
    validation_data=val_gene,
    verbose=1,
    callbacks=[cb])

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

converter=tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model=converter.convert()

with tf.io.gfile.GFile('model.tflite','wb') as f:
  f.write(tflite_model)

!ls -la | grep 'model'

